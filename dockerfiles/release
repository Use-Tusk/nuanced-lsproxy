# Use the official Rust image as a parent image
FROM rust:1.74-slim-buster as builder

# Set the working directory in the container
WORKDIR /usr/src/app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    git \
    pkg-config \
    libssl-dev

# Copy the entire project
COPY . .

# Build the application
RUN cargo build --release

# Use a smaller base image for the final container
FROM debian:buster-slim

# Set the working directory in the container
WORKDIR /usr/src/app

# Install runtime dependencies, Python, Node.js, and npm
RUN apt-get update && apt-get install -y \
    libssl1.1 \
    ca-certificates \
    git \
    python3 \
    python3-pip \
    curl \
    && curl -fsSL https://deb.nodesource.com/setup_16.x | bash - \
    && apt-get install -y nodejs \
    && pip3 install pyright

# Install Pyright globally
RUN npm install -g pyright

# Install language servers
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"
RUN rustup component add rust-analyzer
RUN npm install -g pyright
RUN npm install -g typescript-language-server typescript

# Copy the binary from the builder stage and the openapi.yaml file
COPY --from=builder /usr/src/app/target/release/lsproxy .

# Document that the container listens on port 8080
EXPOSE 8080

# Run the server directly
CMD ["./lsproxy"]
